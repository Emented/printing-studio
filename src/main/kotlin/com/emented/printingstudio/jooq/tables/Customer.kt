/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables

import com.emented.printingstudio.jooq.Public
import com.emented.printingstudio.jooq.indexes.CUSTOMER_USER_ID_INDEX
import com.emented.printingstudio.jooq.keys.CUSTOMER_PKEY
import com.emented.printingstudio.jooq.keys.CUSTOMER_USER_ID_KEY
import com.emented.printingstudio.jooq.keys.CUSTOMER__CUSTOMER_BUSINESS_INFO_ID_FKEY
import com.emented.printingstudio.jooq.keys.CUSTOMER__CUSTOMER_USER_ID_FKEY
import com.emented.printingstudio.jooq.tables.records.CustomerRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.OffsetDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Customer(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CustomerRecord>?,
    aliased: Table<CustomerRecord>?,
    parameters: Array<Field<*>?>?,
) : TableImpl<CustomerRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
) {
    companion object {

        /**
         * The reference instance of <code>public.customer</code>
         */
        val CUSTOMER = Customer()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CustomerRecord> = CustomerRecord::class.java

    /**
     * The column <code>public.customer.id</code>.
     */
    val ID: TableField<CustomerRecord, Long?> =
        createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.customer.user_id</code>.
     */
    val USER_ID: TableField<CustomerRecord, Long?> =
        createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.customer.business_info_id</code>.
     */
    val BUSINESS_INFO_ID: TableField<CustomerRecord, Long?> =
        createField(DSL.name("business_info_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.customer.creation_timestamp</code>.
     */
    val CREATION_TIMESTAMP: TableField<CustomerRecord, OffsetDateTime?> =
        createField(DSL.name("creation_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>public.customer.update_timestamp</code>.
     */
    val UPDATE_TIMESTAMP: TableField<CustomerRecord, OffsetDateTime?> =
        createField(DSL.name("update_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<CustomerRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CustomerRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        aliased,
        parameters,
    )

    /**
     * Create an aliased <code>public.customer</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.customer</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.customer</code> table reference
     */
    constructor() : this(DSL.name("customer"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CustomerRecord>) : this(
        Internal.createPathAlias(
            child,
            key,
        ),
        child,
        key,
        CUSTOMER,
        null,
    )

    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(CUSTOMER_USER_ID_INDEX)
    override fun getIdentity(): Identity<CustomerRecord, Long?> = super.getIdentity() as Identity<CustomerRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<CustomerRecord> = CUSTOMER_PKEY
    override fun getKeys(): List<UniqueKey<CustomerRecord>> = listOf(CUSTOMER_PKEY, CUSTOMER_USER_ID_KEY)
    override fun getReferences(): List<ForeignKey<CustomerRecord, *>> =
        listOf(CUSTOMER__CUSTOMER_USER_ID_FKEY, CUSTOMER__CUSTOMER_BUSINESS_INFO_ID_FKEY)

    private lateinit var _user: User
    private lateinit var _businessInfo: BusinessInfo
    fun user(): User {
        if (!this::_user.isInitialized) {
            _user = User(this, CUSTOMER__CUSTOMER_USER_ID_FKEY)
        }

        return _user
    }

    fun businessInfo(): BusinessInfo {
        if (!this::_businessInfo.isInitialized) {
            _businessInfo = BusinessInfo(this, CUSTOMER__CUSTOMER_BUSINESS_INFO_ID_FKEY)
        }

        return _businessInfo
    }

    override fun `as`(alias: String): Customer = Customer(DSL.name(alias), this)
    override fun `as`(alias: Name): Customer = Customer(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Customer = Customer(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Customer = Customer(name, null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Long?, Long?, Long?, OffsetDateTime?, OffsetDateTime?> =
        super.fieldsRow() as Row5<Long?, Long?, Long?, OffsetDateTime?, OffsetDateTime?>
}
