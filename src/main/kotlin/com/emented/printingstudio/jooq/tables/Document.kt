/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables

import com.emented.printingstudio.jooq.Public
import com.emented.printingstudio.jooq.indexes.DOCUMENT_ORDER_ID_INDEX
import com.emented.printingstudio.jooq.keys.DOCUMENT_PKEY
import com.emented.printingstudio.jooq.keys.DOCUMENT__DOCUMENT_ORDER_ID_FKEY
import com.emented.printingstudio.jooq.keys.DOCUMENT__DOCUMENT_TYPE_FKEY
import com.emented.printingstudio.jooq.tables.records.DocumentRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.OffsetDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Document(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DocumentRecord>?,
    aliased: Table<DocumentRecord>?,
    parameters: Array<Field<*>?>?,
) : TableImpl<DocumentRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
) {
    companion object {

        /**
         * The reference instance of <code>public.document</code>
         */
        val DOCUMENT = Document()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DocumentRecord> = DocumentRecord::class.java

    /**
     * The column <code>public.document.id</code>.
     */
    val ID: TableField<DocumentRecord, Long?> =
        createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.document.type</code>.
     */
    val TYPE: TableField<DocumentRecord, Long?> =
        createField(DSL.name("type"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.document.url</code>.
     */
    val URL: TableField<DocumentRecord, String?> =
        createField(DSL.name("url"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.document.order_id</code>.
     */
    val ORDER_ID: TableField<DocumentRecord, Long?> =
        createField(DSL.name("order_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.document.creation_timestamp</code>.
     */
    val CREATION_TIMESTAMP: TableField<DocumentRecord, OffsetDateTime?> =
        createField(DSL.name("creation_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>public.document.update_timestamp</code>.
     */
    val UPDATE_TIMESTAMP: TableField<DocumentRecord, OffsetDateTime?> =
        createField(DSL.name("update_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<DocumentRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DocumentRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        aliased,
        parameters,
    )

    /**
     * Create an aliased <code>public.document</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.document</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.document</code> table reference
     */
    constructor() : this(DSL.name("document"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DocumentRecord>) : this(
        Internal.createPathAlias(
            child,
            key,
        ),
        child,
        key,
        DOCUMENT,
        null,
    )

    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(DOCUMENT_ORDER_ID_INDEX)
    override fun getIdentity(): Identity<DocumentRecord, Long?> = super.getIdentity() as Identity<DocumentRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<DocumentRecord> = DOCUMENT_PKEY
    override fun getKeys(): List<UniqueKey<DocumentRecord>> = listOf(DOCUMENT_PKEY)
    override fun getReferences(): List<ForeignKey<DocumentRecord, *>> =
        listOf(DOCUMENT__DOCUMENT_TYPE_FKEY, DOCUMENT__DOCUMENT_ORDER_ID_FKEY)

    private lateinit var _documentType: DocumentType
    private lateinit var _order: Order
    fun documentType(): DocumentType {
        if (!this::_documentType.isInitialized) {
            _documentType = DocumentType(this, DOCUMENT__DOCUMENT_TYPE_FKEY)
        }

        return _documentType
    }

    fun order(): Order {
        if (!this::_order.isInitialized) {
            _order = Order(this, DOCUMENT__DOCUMENT_ORDER_ID_FKEY)
        }

        return _order
    }

    override fun `as`(alias: String): Document = Document(DSL.name(alias), this)
    override fun `as`(alias: Name): Document = Document(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Document = Document(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Document = Document(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Long?, Long?, String?, Long?, OffsetDateTime?, OffsetDateTime?> =
        super.fieldsRow() as Row6<Long?, Long?, String?, Long?, OffsetDateTime?, OffsetDateTime?>
}
