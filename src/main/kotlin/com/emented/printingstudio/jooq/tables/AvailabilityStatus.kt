/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables

import com.emented.printingstudio.jooq.Public
import com.emented.printingstudio.jooq.keys.AVAILABILITY_STATUS_PKEY
import com.emented.printingstudio.jooq.keys.AVAILABILITY_STATUS_VALUE_KEY
import com.emented.printingstudio.jooq.tables.records.AvailabilityStatusRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AvailabilityStatus(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AvailabilityStatusRecord>?,
    aliased: Table<AvailabilityStatusRecord>?,
    parameters: Array<Field<*>?>?,
) : TableImpl<AvailabilityStatusRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
) {
    companion object {

        /**
         * The reference instance of <code>public.availability_status</code>
         */
        val AVAILABILITY_STATUS = AvailabilityStatus()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AvailabilityStatusRecord> = AvailabilityStatusRecord::class.java

    /**
     * The column <code>public.availability_status.id</code>.
     */
    val ID: TableField<AvailabilityStatusRecord, Long?> =
        createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.availability_status.value</code>.
     */
    val VALUE: TableField<AvailabilityStatusRecord, String?> =
        createField(DSL.name("value"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<AvailabilityStatusRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AvailabilityStatusRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        aliased,
        parameters,
    )

    /**
     * Create an aliased <code>public.availability_status</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.availability_status</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.availability_status</code> table reference
     */
    constructor() : this(DSL.name("availability_status"), null)

    constructor(
        child: Table<out Record>,
        key: ForeignKey<out Record, AvailabilityStatusRecord>,
    ) : this(Internal.createPathAlias(child, key), child, key, AVAILABILITY_STATUS, null)

    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<AvailabilityStatusRecord, Long?> =
        super.getIdentity() as Identity<AvailabilityStatusRecord, Long?>

    override fun getPrimaryKey(): UniqueKey<AvailabilityStatusRecord> = AVAILABILITY_STATUS_PKEY
    override fun getKeys(): List<UniqueKey<AvailabilityStatusRecord>> =
        listOf(AVAILABILITY_STATUS_PKEY, AVAILABILITY_STATUS_VALUE_KEY)

    override fun `as`(alias: String): AvailabilityStatus = AvailabilityStatus(DSL.name(alias), this)
    override fun `as`(alias: Name): AvailabilityStatus = AvailabilityStatus(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): AvailabilityStatus = AvailabilityStatus(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AvailabilityStatus = AvailabilityStatus(name, null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Long?, String?> = super.fieldsRow() as Row2<Long?, String?>
}
