/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables


import com.emented.printingstudio.jooq.Public
import com.emented.printingstudio.jooq.keys.CUSTOMER_SOCIAL_NETWORK_PKEY
import com.emented.printingstudio.jooq.keys.CUSTOMER_SOCIAL_NETWORK__CUSTOMER_SOCIAL_NETWORK_CUSTOMER_ID_FKEY
import com.emented.printingstudio.jooq.keys.CUSTOMER_SOCIAL_NETWORK__CUSTOMER_SOCIAL_NETWORK_SOCIAL_NETWORK_ID_FKEY
import com.emented.printingstudio.jooq.tables.Customer.CustomerPath
import com.emented.printingstudio.jooq.tables.SocialNetwork.SocialNetworkPath
import com.emented.printingstudio.jooq.tables.records.CustomerSocialNetworkRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CustomerSocialNetwork(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, CustomerSocialNetworkRecord>?,
    parentPath: InverseForeignKey<out Record, CustomerSocialNetworkRecord>?,
    aliased: Table<CustomerSocialNetworkRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<CustomerSocialNetworkRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.customer_social_network</code>
         */
        val CUSTOMER_SOCIAL_NETWORK: CustomerSocialNetwork = CustomerSocialNetwork()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CustomerSocialNetworkRecord> = CustomerSocialNetworkRecord::class.java

    /**
     * The column <code>public.customer_social_network.customer_id</code>.
     */
    val CUSTOMER_ID: TableField<CustomerSocialNetworkRecord, Long?> = createField(DSL.name("customer_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.customer_social_network.social_network_id</code>.
     */
    val SOCIAL_NETWORK_ID: TableField<CustomerSocialNetworkRecord, Long?> = createField(DSL.name("social_network_id"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<CustomerSocialNetworkRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<CustomerSocialNetworkRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<CustomerSocialNetworkRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.customer_social_network</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.customer_social_network</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.customer_social_network</code> table reference
     */
    constructor(): this(DSL.name("customer_social_network"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, CustomerSocialNetworkRecord>?, parentPath: InverseForeignKey<out Record, CustomerSocialNetworkRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, CUSTOMER_SOCIAL_NETWORK, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class CustomerSocialNetworkPath : CustomerSocialNetwork, Path<CustomerSocialNetworkRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, CustomerSocialNetworkRecord>?, parentPath: InverseForeignKey<out Record, CustomerSocialNetworkRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<CustomerSocialNetworkRecord>): super(alias, aliased)
        override fun `as`(alias: String): CustomerSocialNetworkPath = CustomerSocialNetworkPath(DSL.name(alias), this)
        override fun `as`(alias: Name): CustomerSocialNetworkPath = CustomerSocialNetworkPath(alias, this)
        override fun `as`(alias: Table<*>): CustomerSocialNetworkPath = CustomerSocialNetworkPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<CustomerSocialNetworkRecord> = CUSTOMER_SOCIAL_NETWORK_PKEY
    override fun getReferences(): List<ForeignKey<CustomerSocialNetworkRecord, *>> = listOf(CUSTOMER_SOCIAL_NETWORK__CUSTOMER_SOCIAL_NETWORK_CUSTOMER_ID_FKEY, CUSTOMER_SOCIAL_NETWORK__CUSTOMER_SOCIAL_NETWORK_SOCIAL_NETWORK_ID_FKEY)

    private lateinit var _customer: CustomerPath

    /**
     * Get the implicit join path to the <code>public.customer</code> table.
     */
    fun customer(): CustomerPath {
        if (!this::_customer.isInitialized)
            _customer = CustomerPath(this, CUSTOMER_SOCIAL_NETWORK__CUSTOMER_SOCIAL_NETWORK_CUSTOMER_ID_FKEY, null)

        return _customer;
    }

    val customer: CustomerPath
        get(): CustomerPath = customer()

    private lateinit var _socialNetwork: SocialNetworkPath

    /**
     * Get the implicit join path to the <code>public.social_network</code>
     * table.
     */
    fun socialNetwork(): SocialNetworkPath {
        if (!this::_socialNetwork.isInitialized)
            _socialNetwork = SocialNetworkPath(this, CUSTOMER_SOCIAL_NETWORK__CUSTOMER_SOCIAL_NETWORK_SOCIAL_NETWORK_ID_FKEY, null)

        return _socialNetwork;
    }

    val socialNetwork: SocialNetworkPath
        get(): SocialNetworkPath = socialNetwork()
    override fun `as`(alias: String): CustomerSocialNetwork = CustomerSocialNetwork(DSL.name(alias), this)
    override fun `as`(alias: Name): CustomerSocialNetwork = CustomerSocialNetwork(alias, this)
    override fun `as`(alias: Table<*>): CustomerSocialNetwork = CustomerSocialNetwork(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CustomerSocialNetwork = CustomerSocialNetwork(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CustomerSocialNetwork = CustomerSocialNetwork(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): CustomerSocialNetwork = CustomerSocialNetwork(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): CustomerSocialNetwork = CustomerSocialNetwork(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): CustomerSocialNetwork = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): CustomerSocialNetwork = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): CustomerSocialNetwork = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): CustomerSocialNetwork = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): CustomerSocialNetwork = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): CustomerSocialNetwork = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): CustomerSocialNetwork = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): CustomerSocialNetwork = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): CustomerSocialNetwork = where(DSL.notExists(select))
}
