/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables.records


import com.emented.printingstudio.jooq.tables.User

import java.time.OffsetDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRecord() : UpdatableRecordImpl<UserRecord>(User.USER) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var username: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var passwordHash: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var name: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var surname: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var patronymic: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var phone: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var email: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var address: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open var creationTimestamp: OffsetDateTime?
        set(value): Unit = set(9, value)
        get(): OffsetDateTime? = get(9) as OffsetDateTime?

    open var updateTimestamp: OffsetDateTime?
        set(value): Unit = set(10, value)
        get(): OffsetDateTime? = get(10) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised UserRecord
     */
    constructor(id: Long? = null, username: String? = null, passwordHash: String? = null, name: String? = null, surname: String? = null, patronymic: String? = null, phone: String? = null, email: String? = null, address: String? = null, creationTimestamp: OffsetDateTime? = null, updateTimestamp: OffsetDateTime? = null): this() {
        this.id = id
        this.username = username
        this.passwordHash = passwordHash
        this.name = name
        this.surname = surname
        this.patronymic = patronymic
        this.phone = phone
        this.email = email
        this.address = address
        this.creationTimestamp = creationTimestamp
        this.updateTimestamp = updateTimestamp
        resetChangedOnNotNull()
    }
}
