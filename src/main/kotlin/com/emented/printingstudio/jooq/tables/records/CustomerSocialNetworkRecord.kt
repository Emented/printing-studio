/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables.records

import com.emented.printingstudio.jooq.tables.CustomerSocialNetwork
import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CustomerSocialNetworkRecord() :
    UpdatableRecordImpl<CustomerSocialNetworkRecord>(CustomerSocialNetwork.CUSTOMER_SOCIAL_NETWORK),
    Record2<Long?, Long?> {

    var customerId: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var socialNetworkId: Long?
        set(value) = set(1, value)
        get() = get(1) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Long?, Long?> = super.key() as Record2<Long?, Long?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Long?, Long?> = super.fieldsRow() as Row2<Long?, Long?>
    override fun valuesRow(): Row2<Long?, Long?> = super.valuesRow() as Row2<Long?, Long?>
    override fun field1(): Field<Long?> = CustomerSocialNetwork.CUSTOMER_SOCIAL_NETWORK.CUSTOMER_ID
    override fun field2(): Field<Long?> = CustomerSocialNetwork.CUSTOMER_SOCIAL_NETWORK.SOCIAL_NETWORK_ID
    override fun component1(): Long? = customerId
    override fun component2(): Long? = socialNetworkId
    override fun value1(): Long? = customerId
    override fun value2(): Long? = socialNetworkId

    override fun value1(value: Long?): CustomerSocialNetworkRecord {
        this.customerId = value
        return this
    }

    override fun value2(value: Long?): CustomerSocialNetworkRecord {
        this.socialNetworkId = value
        return this
    }

    override fun values(value1: Long?, value2: Long?): CustomerSocialNetworkRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised CustomerSocialNetworkRecord
     */
    constructor(customerId: Long? = null, socialNetworkId: Long? = null) : this() {
        this.customerId = customerId
        this.socialNetworkId = socialNetworkId
    }
}
