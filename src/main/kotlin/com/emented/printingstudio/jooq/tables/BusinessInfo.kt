/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables


import com.emented.printingstudio.jooq.Public
import com.emented.printingstudio.jooq.indexes.BUSINESS_INFO_INN_KPP_INDEX
import com.emented.printingstudio.jooq.keys.BUSINESS_INFO_PKEY
import com.emented.printingstudio.jooq.keys.CUSTOMER__CUSTOMER_BUSINESS_INFO_ID_FKEY
import com.emented.printingstudio.jooq.tables.Customer.CustomerPath
import com.emented.printingstudio.jooq.tables.records.BusinessInfoRecord

import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BusinessInfo(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, BusinessInfoRecord>?,
    parentPath: InverseForeignKey<out Record, BusinessInfoRecord>?,
    aliased: Table<BusinessInfoRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<BusinessInfoRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.business_info</code>
         */
        val BUSINESS_INFO: BusinessInfo = BusinessInfo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BusinessInfoRecord> = BusinessInfoRecord::class.java

    /**
     * The column <code>public.business_info.id</code>.
     */
    val ID: TableField<BusinessInfoRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.business_info.inn</code>.
     */
    val INN: TableField<BusinessInfoRecord, String?> = createField(DSL.name("inn"), SQLDataType.VARCHAR(12).nullable(false), this, "")

    /**
     * The column <code>public.business_info.kpp</code>.
     */
    val KPP: TableField<BusinessInfoRecord, String?> = createField(DSL.name("kpp"), SQLDataType.VARCHAR(9), this, "")

    /**
     * The column <code>public.business_info.company_name</code>.
     */
    val COMPANY_NAME: TableField<BusinessInfoRecord, String?> = createField(DSL.name("company_name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.business_info.creation_timestamp</code>.
     */
    val CREATION_TIMESTAMP: TableField<BusinessInfoRecord, OffsetDateTime?> = createField(DSL.name("creation_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>public.business_info.update_timestamp</code>.
     */
    val UPDATE_TIMESTAMP: TableField<BusinessInfoRecord, OffsetDateTime?> = createField(DSL.name("update_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<BusinessInfoRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<BusinessInfoRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<BusinessInfoRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.business_info</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.business_info</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.business_info</code> table reference
     */
    constructor(): this(DSL.name("business_info"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BusinessInfoRecord>?, parentPath: InverseForeignKey<out Record, BusinessInfoRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BUSINESS_INFO, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class BusinessInfoPath : BusinessInfo, Path<BusinessInfoRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BusinessInfoRecord>?, parentPath: InverseForeignKey<out Record, BusinessInfoRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<BusinessInfoRecord>): super(alias, aliased)
        override fun `as`(alias: String): BusinessInfoPath = BusinessInfoPath(DSL.name(alias), this)
        override fun `as`(alias: Name): BusinessInfoPath = BusinessInfoPath(alias, this)
        override fun `as`(alias: Table<*>): BusinessInfoPath = BusinessInfoPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(BUSINESS_INFO_INN_KPP_INDEX)
    override fun getIdentity(): Identity<BusinessInfoRecord, Long?> = super.getIdentity() as Identity<BusinessInfoRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<BusinessInfoRecord> = BUSINESS_INFO_PKEY

    private lateinit var _customer: CustomerPath

    /**
     * Get the implicit to-many join path to the <code>public.customer</code>
     * table
     */
    fun customer(): CustomerPath {
        if (!this::_customer.isInitialized)
            _customer = CustomerPath(this, null, CUSTOMER__CUSTOMER_BUSINESS_INFO_ID_FKEY.inverseKey)

        return _customer;
    }

    val customer: CustomerPath
        get(): CustomerPath = customer()
    override fun `as`(alias: String): BusinessInfo = BusinessInfo(DSL.name(alias), this)
    override fun `as`(alias: Name): BusinessInfo = BusinessInfo(alias, this)
    override fun `as`(alias: Table<*>): BusinessInfo = BusinessInfo(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BusinessInfo = BusinessInfo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BusinessInfo = BusinessInfo(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): BusinessInfo = BusinessInfo(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): BusinessInfo = BusinessInfo(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): BusinessInfo = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): BusinessInfo = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): BusinessInfo = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): BusinessInfo = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): BusinessInfo = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): BusinessInfo = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): BusinessInfo = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): BusinessInfo = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): BusinessInfo = where(DSL.notExists(select))
}
