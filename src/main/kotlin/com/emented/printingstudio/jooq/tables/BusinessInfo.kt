/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables

import com.emented.printingstudio.jooq.Public
import com.emented.printingstudio.jooq.indexes.BUSINESS_INFO_INN_KPP_INDEX
import com.emented.printingstudio.jooq.keys.BUSINESS_INFO_PKEY
import com.emented.printingstudio.jooq.tables.records.BusinessInfoRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.OffsetDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BusinessInfo(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BusinessInfoRecord>?,
    aliased: Table<BusinessInfoRecord>?,
    parameters: Array<Field<*>?>?,
) : TableImpl<BusinessInfoRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
) {
    companion object {

        /**
         * The reference instance of <code>public.business_info</code>
         */
        val BUSINESS_INFO = BusinessInfo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BusinessInfoRecord> = BusinessInfoRecord::class.java

    /**
     * The column <code>public.business_info.id</code>.
     */
    val ID: TableField<BusinessInfoRecord, Long?> =
        createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.business_info.inn</code>.
     */
    val INN: TableField<BusinessInfoRecord, String?> =
        createField(DSL.name("inn"), SQLDataType.VARCHAR(12).nullable(false), this, "")

    /**
     * The column <code>public.business_info.kpp</code>.
     */
    val KPP: TableField<BusinessInfoRecord, String?> = createField(DSL.name("kpp"), SQLDataType.VARCHAR(9), this, "")

    /**
     * The column <code>public.business_info.company_name</code>.
     */
    val COMPANY_NAME: TableField<BusinessInfoRecord, String?> =
        createField(DSL.name("company_name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.business_info.creation_timestamp</code>.
     */
    val CREATION_TIMESTAMP: TableField<BusinessInfoRecord, OffsetDateTime?> =
        createField(DSL.name("creation_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>public.business_info.update_timestamp</code>.
     */
    val UPDATE_TIMESTAMP: TableField<BusinessInfoRecord, OffsetDateTime?> =
        createField(DSL.name("update_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<BusinessInfoRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BusinessInfoRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        aliased,
        parameters,
    )

    /**
     * Create an aliased <code>public.business_info</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.business_info</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.business_info</code> table reference
     */
    constructor() : this(DSL.name("business_info"), null)

    constructor(
        child: Table<out Record>,
        key: ForeignKey<out Record, BusinessInfoRecord>,
    ) : this(Internal.createPathAlias(child, key), child, key, BUSINESS_INFO, null)

    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(BUSINESS_INFO_INN_KPP_INDEX)
    override fun getIdentity(): Identity<BusinessInfoRecord, Long?> =
        super.getIdentity() as Identity<BusinessInfoRecord, Long?>

    override fun getPrimaryKey(): UniqueKey<BusinessInfoRecord> = BUSINESS_INFO_PKEY
    override fun getKeys(): List<UniqueKey<BusinessInfoRecord>> = listOf(BUSINESS_INFO_PKEY)
    override fun `as`(alias: String): BusinessInfo = BusinessInfo(DSL.name(alias), this)
    override fun `as`(alias: Name): BusinessInfo = BusinessInfo(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BusinessInfo = BusinessInfo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BusinessInfo = BusinessInfo(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Long?, String?, String?, String?, OffsetDateTime?, OffsetDateTime?> =
        super.fieldsRow() as Row6<Long?, String?, String?, String?, OffsetDateTime?, OffsetDateTime?>
}
