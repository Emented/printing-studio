/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables


import com.emented.printingstudio.jooq.Public
import com.emented.printingstudio.jooq.tables.records.GetTotalSalesPerMaterialRecord

import java.math.BigDecimal

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GetTotalSalesPerMaterial(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, GetTotalSalesPerMaterialRecord>?,
    parentPath: InverseForeignKey<out Record, GetTotalSalesPerMaterialRecord>?,
    aliased: Table<GetTotalSalesPerMaterialRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<GetTotalSalesPerMaterialRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.get_total_sales_per_material</code>
         */
        val GET_TOTAL_SALES_PER_MATERIAL: GetTotalSalesPerMaterial = GetTotalSalesPerMaterial()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GetTotalSalesPerMaterialRecord> = GetTotalSalesPerMaterialRecord::class.java

    /**
     * The column
     * <code>public.get_total_sales_per_material.material_type</code>.
     */
    val MATERIAL_TYPE: TableField<GetTotalSalesPerMaterialRecord, Long?> = createField(DSL.name("material_type"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>public.get_total_sales_per_material.sales_revenue</code>.
     */
    val SALES_REVENUE: TableField<GetTotalSalesPerMaterialRecord, BigDecimal?> = createField(DSL.name("sales_revenue"), SQLDataType.NUMERIC, this, "")

    private constructor(alias: Name, aliased: Table<GetTotalSalesPerMaterialRecord>?): this(alias, null, null, null, aliased, arrayOf(
    ), null)
    private constructor(alias: Name, aliased: Table<GetTotalSalesPerMaterialRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>public.get_total_sales_per_material</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.get_total_sales_per_material</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.get_total_sales_per_material</code> table reference
     */
    constructor(): this(DSL.name("get_total_sales_per_material"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): GetTotalSalesPerMaterial = GetTotalSalesPerMaterial(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): GetTotalSalesPerMaterial = GetTotalSalesPerMaterial(alias, this, parameters)
    override fun `as`(alias: Table<*>): GetTotalSalesPerMaterial = GetTotalSalesPerMaterial(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): GetTotalSalesPerMaterial = GetTotalSalesPerMaterial(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GetTotalSalesPerMaterial = GetTotalSalesPerMaterial(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GetTotalSalesPerMaterial = GetTotalSalesPerMaterial(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(): GetTotalSalesPerMaterial = GetTotalSalesPerMaterial(DSL.name("get_total_sales_per_material"), null, arrayOf()).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
