/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables.records

import com.emented.printingstudio.jooq.tables.SocialNetwork
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SocialNetworkRecord() :
    UpdatableRecordImpl<SocialNetworkRecord>(SocialNetwork.SOCIAL_NETWORK),
    Record3<Long?, String?, String?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var link: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var type: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Long?, String?, String?> = super.fieldsRow() as Row3<Long?, String?, String?>
    override fun valuesRow(): Row3<Long?, String?, String?> = super.valuesRow() as Row3<Long?, String?, String?>
    override fun field1(): Field<Long?> = SocialNetwork.SOCIAL_NETWORK.ID
    override fun field2(): Field<String?> = SocialNetwork.SOCIAL_NETWORK.LINK
    override fun field3(): Field<String?> = SocialNetwork.SOCIAL_NETWORK.TYPE
    override fun component1(): Long? = id
    override fun component2(): String? = link
    override fun component3(): String? = type
    override fun value1(): Long? = id
    override fun value2(): String? = link
    override fun value3(): String? = type

    override fun value1(value: Long?): SocialNetworkRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): SocialNetworkRecord {
        this.link = value
        return this
    }

    override fun value3(value: String?): SocialNetworkRecord {
        this.type = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?): SocialNetworkRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised SocialNetworkRecord
     */
    constructor(id: Long? = null, link: String? = null, type: String? = null) : this() {
        this.id = id
        this.link = link
        this.type = type
    }
}
