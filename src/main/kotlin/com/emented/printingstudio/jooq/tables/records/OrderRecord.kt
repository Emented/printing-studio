/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables.records


import com.emented.printingstudio.jooq.tables.Order

import java.math.BigDecimal
import java.time.OffsetDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrderRecord() : UpdatableRecordImpl<OrderRecord>(Order.ORDER) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var customerId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var status: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var photoUrl: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var description: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var materialId: Long?
        set(value): Unit = set(5, value)
        get(): Long? = get(5) as Long?

    open var printSettingId: Long?
        set(value): Unit = set(6, value)
        get(): Long? = get(6) as Long?

    open var paymentId: Long?
        set(value): Unit = set(7, value)
        get(): Long? = get(7) as Long?

    open var deliveryId: Long?
        set(value): Unit = set(8, value)
        get(): Long? = get(8) as Long?

    open var totalPrice: BigDecimal?
        set(value): Unit = set(9, value)
        get(): BigDecimal? = get(9) as BigDecimal?

    open var quantity: Int?
        set(value): Unit = set(10, value)
        get(): Int? = get(10) as Int?

    open var administratorId: Long?
        set(value): Unit = set(11, value)
        get(): Long? = get(11) as Long?

    open var creationTimestamp: OffsetDateTime?
        set(value): Unit = set(12, value)
        get(): OffsetDateTime? = get(12) as OffsetDateTime?

    open var updateTimestamp: OffsetDateTime?
        set(value): Unit = set(13, value)
        get(): OffsetDateTime? = get(13) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised OrderRecord
     */
    constructor(id: Long? = null, customerId: Long? = null, status: Long? = null, photoUrl: String? = null, description: String? = null, materialId: Long? = null, printSettingId: Long? = null, paymentId: Long? = null, deliveryId: Long? = null, totalPrice: BigDecimal? = null, quantity: Int? = null, administratorId: Long? = null, creationTimestamp: OffsetDateTime? = null, updateTimestamp: OffsetDateTime? = null): this() {
        this.id = id
        this.customerId = customerId
        this.status = status
        this.photoUrl = photoUrl
        this.description = description
        this.materialId = materialId
        this.printSettingId = printSettingId
        this.paymentId = paymentId
        this.deliveryId = deliveryId
        this.totalPrice = totalPrice
        this.quantity = quantity
        this.administratorId = administratorId
        this.creationTimestamp = creationTimestamp
        this.updateTimestamp = updateTimestamp
        resetChangedOnNotNull()
    }
}
