/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables

import com.emented.printingstudio.jooq.Public
import com.emented.printingstudio.jooq.tables.records.GetTotalOrdersPerSettingsRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.math.BigDecimal

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GetTotalOrdersPerSettings(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GetTotalOrdersPerSettingsRecord>?,
    aliased: Table<GetTotalOrdersPerSettingsRecord>?,
    parameters: Array<Field<*>?>?,
) : TableImpl<GetTotalOrdersPerSettingsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
) {
    companion object {

        /**
         * The reference instance of <code>public.get_total_orders_per_settings</code>
         */
        val GET_TOTAL_ORDERS_PER_SETTINGS = GetTotalOrdersPerSettings()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GetTotalOrdersPerSettingsRecord> = GetTotalOrdersPerSettingsRecord::class.java

    /**
     * The column <code>public.get_total_orders_per_settings.material_type</code>.
     */
    val MATERIAL_TYPE: TableField<GetTotalOrdersPerSettingsRecord, Long?> =
        createField(DSL.name("material_type"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.get_total_orders_per_settings.sales_revenue</code>.
     */
    val SALES_REVENUE: TableField<GetTotalOrdersPerSettingsRecord, BigDecimal?> =
        createField(DSL.name("sales_revenue"), SQLDataType.NUMERIC, this, "")

    private constructor(alias: Name, aliased: Table<GetTotalOrdersPerSettingsRecord>?) : this(
        alias,
        null,
        null,
        aliased,
        arrayOf(),
    )

    private constructor(
        alias: Name,
        aliased: Table<GetTotalOrdersPerSettingsRecord>?,
        parameters: Array<Field<*>?>?,
    ) : this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.get_total_orders_per_settings</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.get_total_orders_per_settings</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.get_total_orders_per_settings</code> table reference
     */
    constructor() : this(DSL.name("get_total_orders_per_settings"), null)

    override fun getSchema(): Schema = Public.PUBLIC
    override fun `as`(alias: String): GetTotalOrdersPerSettings =
        GetTotalOrdersPerSettings(DSL.name(alias), this, parameters)

    override fun `as`(alias: Name): GetTotalOrdersPerSettings = GetTotalOrdersPerSettings(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): GetTotalOrdersPerSettings =
        GetTotalOrdersPerSettings(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GetTotalOrdersPerSettings = GetTotalOrdersPerSettings(name, null, parameters)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Long?, BigDecimal?> = super.fieldsRow() as Row2<Long?, BigDecimal?>

    /**
     * Call this table-valued function
     */
    fun call(): GetTotalOrdersPerSettings = GetTotalOrdersPerSettings(
        DSL.name("get_total_orders_per_settings"),
        null,
        arrayOf(),
    ).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
