/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables

import com.emented.printingstudio.jooq.Public
import com.emented.printingstudio.jooq.keys.USER_EMAIL_KEY
import com.emented.printingstudio.jooq.keys.USER_PKEY
import com.emented.printingstudio.jooq.keys.USER_USERNAME_KEY
import com.emented.printingstudio.jooq.tables.records.UserRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row11
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.OffsetDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class User(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UserRecord>?,
    aliased: Table<UserRecord>?,
    parameters: Array<Field<*>?>?,
) : TableImpl<UserRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
) {
    companion object {

        /**
         * The reference instance of <code>public.user</code>
         */
        val USER = User()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserRecord> = UserRecord::class.java

    /**
     * The column <code>public.user.id</code>.
     */
    val ID: TableField<UserRecord, Long?> =
        createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.user.username</code>.
     */
    val USERNAME: TableField<UserRecord, String?> =
        createField(DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.user.password_hash</code>.
     */
    val PASSWORD_HASH: TableField<UserRecord, String?> =
        createField(DSL.name("password_hash"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.user.name</code>.
     */
    val NAME: TableField<UserRecord, String?> =
        createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.user.surname</code>.
     */
    val SURNAME: TableField<UserRecord, String?> =
        createField(DSL.name("surname"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.user.patronymic</code>.
     */
    val PATRONYMIC: TableField<UserRecord, String?> =
        createField(DSL.name("patronymic"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.user.phone</code>.
     */
    val PHONE: TableField<UserRecord, String?> =
        createField(DSL.name("phone"), SQLDataType.VARCHAR(20).nullable(false), this, "")

    /**
     * The column <code>public.user.email</code>.
     */
    val EMAIL: TableField<UserRecord, String?> =
        createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.user.address</code>.
     */
    val ADDRESS: TableField<UserRecord, String?> =
        createField(DSL.name("address"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.user.creation_timestamp</code>.
     */
    val CREATION_TIMESTAMP: TableField<UserRecord, OffsetDateTime?> =
        createField(DSL.name("creation_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>public.user.update_timestamp</code>.
     */
    val UPDATE_TIMESTAMP: TableField<UserRecord, OffsetDateTime?> =
        createField(DSL.name("update_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<UserRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UserRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        aliased,
        parameters,
    )

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.user</code> table reference
     */
    constructor() : this(DSL.name("user"), null)

    constructor(
        child: Table<out Record>,
        key: ForeignKey<out Record, UserRecord>,
    ) : this(Internal.createPathAlias(child, key), child, key, USER, null)

    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<UserRecord, Long?> = super.getIdentity() as Identity<UserRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<UserRecord> = USER_PKEY
    override fun getKeys(): List<UniqueKey<UserRecord>> = listOf(USER_PKEY, USER_USERNAME_KEY, USER_EMAIL_KEY)
    override fun `as`(alias: String): User = User(DSL.name(alias), this)
    override fun `as`(alias: Name): User = User(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): User = User(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): User = User(name, null)

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row11<Long?, String?, String?, String?, String?, String?, String?, String?, String?, OffsetDateTime?, OffsetDateTime?> =
        super.fieldsRow() as Row11<Long?, String?, String?, String?, String?, String?, String?, String?, String?, OffsetDateTime?, OffsetDateTime?>
}
