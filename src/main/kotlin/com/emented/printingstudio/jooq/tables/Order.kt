/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables

import com.emented.printingstudio.jooq.Public
import com.emented.printingstudio.jooq.indexes.ORDER_ADMINISTRATOR_ID_INDEX
import com.emented.printingstudio.jooq.indexes.ORDER_CUSTOMER_ID_INDEX
import com.emented.printingstudio.jooq.indexes.ORDER_STATUS_CREATION_DATE_INDEX
import com.emented.printingstudio.jooq.keys.ORDER_PKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_ADMINISTRATOR_ID_FKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_CUSTOMER_ID_FKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_DELIVERY_ID_FKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_MATERIAL_ID_FKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_PAYMENT_ID_FKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_PRINT_SETTING_ID_FKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_STATUS_FKEY
import com.emented.printingstudio.jooq.tables.records.OrderRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row14
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.math.BigDecimal
import java.time.OffsetDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Order(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, OrderRecord>?,
    aliased: Table<OrderRecord>?,
    parameters: Array<Field<*>?>?,
) : TableImpl<OrderRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
) {
    companion object {

        /**
         * The reference instance of <code>public.order</code>
         */
        val ORDER = Order()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OrderRecord> = OrderRecord::class.java

    /**
     * The column <code>public.order.id</code>.
     */
    val ID: TableField<OrderRecord, Long?> =
        createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.order.customer_id</code>.
     */
    val CUSTOMER_ID: TableField<OrderRecord, Long?> =
        createField(DSL.name("customer_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.order.status</code>.
     */
    val STATUS: TableField<OrderRecord, Long?> =
        createField(DSL.name("status"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.order.photo_url</code>.
     */
    val PHOTO_URL: TableField<OrderRecord, String?> =
        createField(DSL.name("photo_url"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.order.description</code>.
     */
    val DESCRIPTION: TableField<OrderRecord, String?> =
        createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.order.material_id</code>.
     */
    val MATERIAL_ID: TableField<OrderRecord, Long?> =
        createField(DSL.name("material_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.order.print_setting_id</code>.
     */
    val PRINT_SETTING_ID: TableField<OrderRecord, Long?> =
        createField(DSL.name("print_setting_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.order.payment_id</code>.
     */
    val PAYMENT_ID: TableField<OrderRecord, Long?> =
        createField(DSL.name("payment_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.order.delivery_id</code>.
     */
    val DELIVERY_ID: TableField<OrderRecord, Long?> =
        createField(DSL.name("delivery_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.order.total_price</code>.
     */
    val TOTAL_PRICE: TableField<OrderRecord, BigDecimal?> =
        createField(DSL.name("total_price"), SQLDataType.NUMERIC(22, 2).nullable(false), this, "")

    /**
     * The column <code>public.order.quantity</code>.
     */
    val QUANTITY: TableField<OrderRecord, Int?> =
        createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.order.administrator_id</code>.
     */
    val ADMINISTRATOR_ID: TableField<OrderRecord, Long?> =
        createField(DSL.name("administrator_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.order.creation_timestamp</code>.
     */
    val CREATION_TIMESTAMP: TableField<OrderRecord, OffsetDateTime?> =
        createField(DSL.name("creation_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>public.order.update_timestamp</code>.
     */
    val UPDATE_TIMESTAMP: TableField<OrderRecord, OffsetDateTime?> =
        createField(DSL.name("update_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<OrderRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<OrderRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        aliased,
        parameters,
    )

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.order</code> table reference
     */
    constructor() : this(DSL.name("order"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, OrderRecord>) : this(
        Internal.createPathAlias(
            child,
            key,
        ),
        child,
        key,
        ORDER,
        null,
    )

    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIndexes(): List<Index> =
        listOf(ORDER_ADMINISTRATOR_ID_INDEX, ORDER_CUSTOMER_ID_INDEX, ORDER_STATUS_CREATION_DATE_INDEX)

    override fun getIdentity(): Identity<OrderRecord, Long?> = super.getIdentity() as Identity<OrderRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<OrderRecord> = ORDER_PKEY
    override fun getKeys(): List<UniqueKey<OrderRecord>> = listOf(ORDER_PKEY)
    override fun getReferences(): List<ForeignKey<OrderRecord, *>> = listOf(
        ORDER__ORDER_CUSTOMER_ID_FKEY,
        ORDER__ORDER_STATUS_FKEY,
        ORDER__ORDER_MATERIAL_ID_FKEY,
        ORDER__ORDER_PRINT_SETTING_ID_FKEY,
        ORDER__ORDER_PAYMENT_ID_FKEY,
        ORDER__ORDER_DELIVERY_ID_FKEY,
        ORDER__ORDER_ADMINISTRATOR_ID_FKEY,
    )

    private lateinit var _customer: Customer
    private lateinit var _orderStatus: OrderStatus
    private lateinit var _material: Material
    private lateinit var _printSetting: PrintSetting
    private lateinit var _payment: Payment
    private lateinit var _delivery: Delivery
    private lateinit var _administrator: Administrator
    fun customer(): Customer {
        if (!this::_customer.isInitialized) {
            _customer = Customer(this, ORDER__ORDER_CUSTOMER_ID_FKEY)
        }

        return _customer
    }

    fun orderStatus(): OrderStatus {
        if (!this::_orderStatus.isInitialized) {
            _orderStatus = OrderStatus(this, ORDER__ORDER_STATUS_FKEY)
        }

        return _orderStatus
    }

    fun material(): Material {
        if (!this::_material.isInitialized) {
            _material = Material(this, ORDER__ORDER_MATERIAL_ID_FKEY)
        }

        return _material
    }

    fun printSetting(): PrintSetting {
        if (!this::_printSetting.isInitialized) {
            _printSetting = PrintSetting(this, ORDER__ORDER_PRINT_SETTING_ID_FKEY)
        }

        return _printSetting
    }

    fun payment(): Payment {
        if (!this::_payment.isInitialized) {
            _payment = Payment(this, ORDER__ORDER_PAYMENT_ID_FKEY)
        }

        return _payment
    }

    fun delivery(): Delivery {
        if (!this::_delivery.isInitialized) {
            _delivery = Delivery(this, ORDER__ORDER_DELIVERY_ID_FKEY)
        }

        return _delivery
    }

    fun administrator(): Administrator {
        if (!this::_administrator.isInitialized) {
            _administrator = Administrator(this, ORDER__ORDER_ADMINISTRATOR_ID_FKEY)
        }

        return _administrator
    }

    override fun `as`(alias: String): Order = Order(DSL.name(alias), this)
    override fun `as`(alias: Name): Order = Order(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Order = Order(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Order = Order(name, null)

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row14<Long?, Long?, Long?, String?, String?, Long?, Long?, Long?, Long?, BigDecimal?, Int?, Long?, OffsetDateTime?, OffsetDateTime?> =
        super.fieldsRow() as Row14<Long?, Long?, Long?, String?, String?, Long?, Long?, Long?, Long?, BigDecimal?, Int?, Long?, OffsetDateTime?, OffsetDateTime?>
}
