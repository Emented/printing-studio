/*
 * This file is generated by jOOQ.
 */
package com.emented.printingstudio.jooq.tables


import com.emented.printingstudio.jooq.Public
import com.emented.printingstudio.jooq.indexes.ORDER_ADMINISTRATOR_ID_INDEX
import com.emented.printingstudio.jooq.indexes.ORDER_CUSTOMER_ID_INDEX
import com.emented.printingstudio.jooq.indexes.ORDER_STATUS_CREATION_DATE_INDEX
import com.emented.printingstudio.jooq.keys.DOCUMENT__DOCUMENT_ORDER_ID_FKEY
import com.emented.printingstudio.jooq.keys.ORDER_PKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_ADMINISTRATOR_ID_FKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_CUSTOMER_ID_FKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_DELIVERY_ID_FKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_MATERIAL_ID_FKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_PAYMENT_ID_FKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_PRINT_SETTING_ID_FKEY
import com.emented.printingstudio.jooq.keys.ORDER__ORDER_STATUS_FKEY
import com.emented.printingstudio.jooq.tables.Administrator.AdministratorPath
import com.emented.printingstudio.jooq.tables.Customer.CustomerPath
import com.emented.printingstudio.jooq.tables.Delivery.DeliveryPath
import com.emented.printingstudio.jooq.tables.Document.DocumentPath
import com.emented.printingstudio.jooq.tables.Material.MaterialPath
import com.emented.printingstudio.jooq.tables.OrderStatus.OrderStatusPath
import com.emented.printingstudio.jooq.tables.Payment.PaymentPath
import com.emented.printingstudio.jooq.tables.PrintSetting.PrintSettingPath
import com.emented.printingstudio.jooq.tables.records.OrderRecord

import java.math.BigDecimal
import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Order(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, OrderRecord>?,
    parentPath: InverseForeignKey<out Record, OrderRecord>?,
    aliased: Table<OrderRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<OrderRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.order</code>
         */
        val ORDER: Order = Order()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OrderRecord> = OrderRecord::class.java

    /**
     * The column <code>public.order.id</code>.
     */
    val ID: TableField<OrderRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.order.customer_id</code>.
     */
    val CUSTOMER_ID: TableField<OrderRecord, Long?> = createField(DSL.name("customer_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.order.status</code>.
     */
    val STATUS: TableField<OrderRecord, Long?> = createField(DSL.name("status"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.order.photo_url</code>.
     */
    val PHOTO_URL: TableField<OrderRecord, String?> = createField(DSL.name("photo_url"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.order.description</code>.
     */
    val DESCRIPTION: TableField<OrderRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.order.material_id</code>.
     */
    val MATERIAL_ID: TableField<OrderRecord, Long?> = createField(DSL.name("material_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.order.print_setting_id</code>.
     */
    val PRINT_SETTING_ID: TableField<OrderRecord, Long?> = createField(DSL.name("print_setting_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.order.payment_id</code>.
     */
    val PAYMENT_ID: TableField<OrderRecord, Long?> = createField(DSL.name("payment_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.order.delivery_id</code>.
     */
    val DELIVERY_ID: TableField<OrderRecord, Long?> = createField(DSL.name("delivery_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.order.total_price</code>.
     */
    val TOTAL_PRICE: TableField<OrderRecord, BigDecimal?> = createField(DSL.name("total_price"), SQLDataType.NUMERIC(22, 2).nullable(false), this, "")

    /**
     * The column <code>public.order.quantity</code>.
     */
    val QUANTITY: TableField<OrderRecord, Int?> = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.order.administrator_id</code>.
     */
    val ADMINISTRATOR_ID: TableField<OrderRecord, Long?> = createField(DSL.name("administrator_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.order.creation_timestamp</code>.
     */
    val CREATION_TIMESTAMP: TableField<OrderRecord, OffsetDateTime?> = createField(DSL.name("creation_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>public.order.update_timestamp</code>.
     */
    val UPDATE_TIMESTAMP: TableField<OrderRecord, OffsetDateTime?> = createField(DSL.name("update_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<OrderRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<OrderRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<OrderRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.order</code> table reference
     */
    constructor(): this(DSL.name("order"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, OrderRecord>?, parentPath: InverseForeignKey<out Record, OrderRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, ORDER, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class OrderPath : Order, Path<OrderRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, OrderRecord>?, parentPath: InverseForeignKey<out Record, OrderRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<OrderRecord>): super(alias, aliased)
        override fun `as`(alias: String): OrderPath = OrderPath(DSL.name(alias), this)
        override fun `as`(alias: Name): OrderPath = OrderPath(alias, this)
        override fun `as`(alias: Table<*>): OrderPath = OrderPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(ORDER_ADMINISTRATOR_ID_INDEX, ORDER_CUSTOMER_ID_INDEX, ORDER_STATUS_CREATION_DATE_INDEX)
    override fun getIdentity(): Identity<OrderRecord, Long?> = super.getIdentity() as Identity<OrderRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<OrderRecord> = ORDER_PKEY
    override fun getReferences(): List<ForeignKey<OrderRecord, *>> = listOf(ORDER__ORDER_CUSTOMER_ID_FKEY, ORDER__ORDER_STATUS_FKEY, ORDER__ORDER_MATERIAL_ID_FKEY, ORDER__ORDER_PRINT_SETTING_ID_FKEY, ORDER__ORDER_PAYMENT_ID_FKEY, ORDER__ORDER_DELIVERY_ID_FKEY, ORDER__ORDER_ADMINISTRATOR_ID_FKEY)

    private lateinit var _customer: CustomerPath

    /**
     * Get the implicit join path to the <code>public.customer</code> table.
     */
    fun customer(): CustomerPath {
        if (!this::_customer.isInitialized)
            _customer = CustomerPath(this, ORDER__ORDER_CUSTOMER_ID_FKEY, null)

        return _customer;
    }

    val customer: CustomerPath
        get(): CustomerPath = customer()

    private lateinit var _orderStatus: OrderStatusPath

    /**
     * Get the implicit join path to the <code>public.order_status</code> table.
     */
    fun orderStatus(): OrderStatusPath {
        if (!this::_orderStatus.isInitialized)
            _orderStatus = OrderStatusPath(this, ORDER__ORDER_STATUS_FKEY, null)

        return _orderStatus;
    }

    val orderStatus: OrderStatusPath
        get(): OrderStatusPath = orderStatus()

    private lateinit var _material: MaterialPath

    /**
     * Get the implicit join path to the <code>public.material</code> table.
     */
    fun material(): MaterialPath {
        if (!this::_material.isInitialized)
            _material = MaterialPath(this, ORDER__ORDER_MATERIAL_ID_FKEY, null)

        return _material;
    }

    val material: MaterialPath
        get(): MaterialPath = material()

    private lateinit var _printSetting: PrintSettingPath

    /**
     * Get the implicit join path to the <code>public.print_setting</code>
     * table.
     */
    fun printSetting(): PrintSettingPath {
        if (!this::_printSetting.isInitialized)
            _printSetting = PrintSettingPath(this, ORDER__ORDER_PRINT_SETTING_ID_FKEY, null)

        return _printSetting;
    }

    val printSetting: PrintSettingPath
        get(): PrintSettingPath = printSetting()

    private lateinit var _payment: PaymentPath

    /**
     * Get the implicit join path to the <code>public.payment</code> table.
     */
    fun payment(): PaymentPath {
        if (!this::_payment.isInitialized)
            _payment = PaymentPath(this, ORDER__ORDER_PAYMENT_ID_FKEY, null)

        return _payment;
    }

    val payment: PaymentPath
        get(): PaymentPath = payment()

    private lateinit var _delivery: DeliveryPath

    /**
     * Get the implicit join path to the <code>public.delivery</code> table.
     */
    fun delivery(): DeliveryPath {
        if (!this::_delivery.isInitialized)
            _delivery = DeliveryPath(this, ORDER__ORDER_DELIVERY_ID_FKEY, null)

        return _delivery;
    }

    val delivery: DeliveryPath
        get(): DeliveryPath = delivery()

    private lateinit var _administrator: AdministratorPath

    /**
     * Get the implicit join path to the <code>public.administrator</code>
     * table.
     */
    fun administrator(): AdministratorPath {
        if (!this::_administrator.isInitialized)
            _administrator = AdministratorPath(this, ORDER__ORDER_ADMINISTRATOR_ID_FKEY, null)

        return _administrator;
    }

    val administrator: AdministratorPath
        get(): AdministratorPath = administrator()

    private lateinit var _document: DocumentPath

    /**
     * Get the implicit to-many join path to the <code>public.document</code>
     * table
     */
    fun document(): DocumentPath {
        if (!this::_document.isInitialized)
            _document = DocumentPath(this, null, DOCUMENT__DOCUMENT_ORDER_ID_FKEY.inverseKey)

        return _document;
    }

    val document: DocumentPath
        get(): DocumentPath = document()
    override fun `as`(alias: String): Order = Order(DSL.name(alias), this)
    override fun `as`(alias: Name): Order = Order(alias, this)
    override fun `as`(alias: Table<*>): Order = Order(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Order = Order(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Order = Order(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Order = Order(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Order = Order(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Order = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Order = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Order = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Order = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Order = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Order = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Order = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Order = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Order = where(DSL.notExists(select))
}
